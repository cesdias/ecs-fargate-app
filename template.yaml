AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for the public subnet 1
    Type: String
    Default: 192.168.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for the public subnet 2
    Type: String
    Default: 192.168.2.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for the private subnet 1
    Type: String
    Default: 192.168.3.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for the private subnet 2
    Type: String
    Default: 192.168.4.0/24

  ContainerImage:
    Description: URL of the Docker container image
    Type: String
    Default: docker-image-url

### Resources definition
Resources:

  # Virtual Private Cloud definition
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ecs-fargate-app-vpc

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ecs-fargate-app-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ecs-fargate-app-public-subnet-2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: ecs-fargate-app-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: ecs-fargate-app-private-subnet-2

  # Internet Gateway definition
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ecs-fargate-app-igw

  # Attach the Internet Gateway to a VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table definition
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ecs-fargate-app-public-rtb

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Association for PublicSubnet1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Route Table Association for PublicSubnet2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Create a NAT Gateway Attachment on Public Subnets
  NatGatewaySubnet1Attachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc

  NatGatewaySubnet2Attachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc

  # Create a NAT Gateway on Public Subnets
  NatGatewaySubnet1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewaySubnet1Attachment.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: ecs-fargate-app-nat-gateway-subnet-1

  NatGatewaySubnet2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewaySubnet2Attachment.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: ecs-fargate-app-nat-gateway-subnet-2

  # Route Table for Private Subnets
  PrivateRouteTableSubnet1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: ecs-fargate-app-private-subnet-1-rtb

  PrivateRouteTableSubnet2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: ecs-fargate-app-private-subnet-2-rtb

  # Route for Private Subnets
  PrivateRouteSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewaySubnet1

  PrivateRouteSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewaySubnet2

  # Route Table Association for Private Subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableSubnet2
      SubnetId: !Ref PrivateSubnet2

  ### Security Groups definition

  # Allow inbound traffic to HTTP and HTTPS
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the web application
      GroupName: ecs-fargate-app-alb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow HTTP inbound traffic
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ecs-fargate-app-alb-sg

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Fargate Containers on ECS Service
      GroupName: ecs-fargate-app-alb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow port 3000 inbound traffic
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref WebAppSecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ecs-fargate-app-ecs-sg

  ### Load Balancer definition

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: ApplicationLoadBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      Tags:
        - Key: Name
          Value: ecs-fargate-app-alb

  # Target Group for ECS Service
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancer
    Properties:
      VpcId: !Ref VPC
      Name: TargetGroup
      TargetType: ip
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: ecs-fargate-app-tg

  # Listener for Application Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ### IAM roles and policies definition

  # Configure AssumeRole for ecsTaskExecutionRole
  # Use the AWS Managed AmazonECSTaskExecutionRolePolicy role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ECSTaskRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:

                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the informations about how to send traffic to your containers
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'

  ### ECS Cluster and Service definition

  # Create a Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ecs-fargate-app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: ecs-fargate-app
          Image: !Ref ContainerImage
          Cpu: 256
          Memory: 512
          Essential: true
          PortMappings:
            - HostPort: 3000
              ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: Author
              Value: Carlos Dias
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX

  # Create a ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: ecs-fargate-app-ecs-cluster

  # Create the ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: ecs-fargate-app-ecs-service
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: ecs-fargate-app
          ContainerPort: 3000
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: ecs-fargate-app-ecs-service

Outputs:
  ApplicationLoadBalancerUrl:
    Description: The URL of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
